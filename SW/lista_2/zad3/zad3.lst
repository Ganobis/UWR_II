
zad3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014e  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000075c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e48  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000177c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002352  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <debonce>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	85 ea       	ldi	r24, 0xA5	; 165
  84:	9e e0       	ldi	r25, 0x0E	; 14
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <debonce+0x6>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <debonce+0x10>
  90:	00 00       	nop
  92:	08 95       	ret

00000094 <show_grey>:
void  debonce(){
  _delay_ms(DEBOUNCE_TIME);
}

void show_grey(int x){
  LED_PORT = x^(x/2);
  94:	9c 01       	movw	r18, r24
  96:	97 fd       	sbrc	r25, 7
  98:	05 c0       	rjmp	.+10     	; 0xa4 <show_grey+0x10>
  9a:	35 95       	asr	r19
  9c:	27 95       	ror	r18
  9e:	28 27       	eor	r18, r24
  a0:	2b b9       	out	0x0b, r18	; 11
  a2:	08 95       	ret
  a4:	2f 5f       	subi	r18, 0xFF	; 255
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
  a8:	35 95       	asr	r19
  aa:	27 95       	ror	r18
  ac:	28 27       	eor	r18, r24
  ae:	2b b9       	out	0x0b, r18	; 11
  b0:	08 95       	ret

000000b2 <main>:
}

int main()
{
  BTN_PORT |= _BV(BTN1);
  b2:	40 9a       	sbi	0x08, 0	; 8
  BTN_PORT |= _BV(BTN2);
  b4:	41 9a       	sbi	0x08, 1	; 8
  BTN_PORT |= _BV(BTN3);
  b6:	42 9a       	sbi	0x08, 2	; 8

  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  b8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  bc:	87 7e       	andi	r24, 0xE7	; 231
  be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  LED_DDR |= 0b11111111;
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a b9       	out	0x0a, r24	; 10
void  debonce(){
  _delay_ms(DEBOUNCE_TIME);
}

void show_grey(int x){
  LED_PORT = x^(x/2);
  c8:	1b b8       	out	0x0b, r1	; 11
}

int main()
{
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <main+0x26>
  	if (!(BTN_PIN & _BV(BTN1))){
      debonce();
  	  acc = (acc + 1) % 256;
  	  show_grey(acc);
  	}
  	if (!(BTN_PIN & _BV(BTN2))){
  d0:	31 9b       	sbis	0x06, 1	; 6
  d2:	19 c0       	rjmp	.+50     	; 0x106 <main+0x54>
  		acc--;
  		if (acc < 0)
    		acc = 255;
    	show_grey(acc);
  	}
  	if (!(BTN_PIN & _BV(BTN3))){
  d4:	32 9b       	sbis	0x06, 2	; 6
  d6:	29 c0       	rjmp	.+82     	; 0x12a <main+0x78>

  int acc = 0;

  show_grey(0);
  while(1){
  	if (!(BTN_PIN & _BV(BTN1))){
  d8:	30 99       	sbic	0x06, 0	; 6
  da:	fa cf       	rjmp	.-12     	; 0xd0 <main+0x1e>
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	35 ea       	ldi	r19, 0xA5	; 165
  e0:	4e e0       	ldi	r20, 0x0E	; 14
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	40 40       	sbci	r20, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x30>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x3a>
  ec:	00 00       	nop
      debonce();
  	  acc = (acc + 1) % 256;
  ee:	9c 01       	movw	r18, r24
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
  f4:	c9 01       	movw	r24, r18
  f6:	99 27       	eor	r25, r25
void  debonce(){
  _delay_ms(DEBOUNCE_TIME);
}

void show_grey(int x){
  LED_PORT = x^(x/2);
  f8:	ac 01       	movw	r20, r24
  fa:	55 95       	asr	r21
  fc:	47 95       	ror	r20
  fe:	24 27       	eor	r18, r20
 100:	2b b9       	out	0x0b, r18	; 11
  	if (!(BTN_PIN & _BV(BTN1))){
      debonce();
  	  acc = (acc + 1) % 256;
  	  show_grey(acc);
  	}
  	if (!(BTN_PIN & _BV(BTN2))){
 102:	31 99       	sbic	0x06, 1	; 6
 104:	e7 cf       	rjmp	.-50     	; 0xd4 <main+0x22>
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	35 ea       	ldi	r19, 0xA5	; 165
 10a:	4e e0       	ldi	r20, 0x0E	; 14
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	40 40       	sbci	r20, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x5a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x64>
 116:	00 00       	nop
      debonce();
  		acc--;
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	90 f0       	brcs	.+36     	; 0x140 <main+0x8e>
 11c:	9c 01       	movw	r18, r24
 11e:	35 95       	asr	r19
 120:	27 95       	ror	r18
 122:	28 27       	eor	r18, r24
void  debonce(){
  _delay_ms(DEBOUNCE_TIME);
}

void show_grey(int x){
  LED_PORT = x^(x/2);
 124:	2b b9       	out	0x0b, r18	; 11
  		acc--;
  		if (acc < 0)
    		acc = 255;
    	show_grey(acc);
  	}
  	if (!(BTN_PIN & _BV(BTN3))){
 126:	32 99       	sbic	0x06, 2	; 6
 128:	d7 cf       	rjmp	.-82     	; 0xd8 <main+0x26>
 12a:	3f ef       	ldi	r19, 0xFF	; 255
 12c:	45 ea       	ldi	r20, 0xA5	; 165
 12e:	8e e0       	ldi	r24, 0x0E	; 14
 130:	31 50       	subi	r19, 0x01	; 1
 132:	40 40       	sbci	r20, 0x00	; 0
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x7e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x88>
 13a:	00 00       	nop
void  debonce(){
  _delay_ms(DEBOUNCE_TIME);
}

void show_grey(int x){
  LED_PORT = x^(x/2);
 13c:	1b b8       	out	0x0b, r1	; 11
 13e:	c5 cf       	rjmp	.-118    	; 0xca <main+0x18>
 140:	20 e8       	ldi	r18, 0x80	; 128
  	}
  	if (!(BTN_PIN & _BV(BTN2))){
      debonce();
  		acc--;
  		if (acc < 0)
    		acc = 255;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	90 e0       	ldi	r25, 0x00	; 0
void  debonce(){
  _delay_ms(DEBOUNCE_TIME);
}

void show_grey(int x){
  LED_PORT = x^(x/2);
 146:	2b b9       	out	0x0b, r18	; 11
 148:	ee cf       	rjmp	.-36     	; 0x126 <main+0x74>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
