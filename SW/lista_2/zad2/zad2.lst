
zad2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008001b6  008001b6  000004be  2**0
                  ALLOC
  3 .stab         00000a5c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f32  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3b       	cpi	r26, 0xB6	; 182
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 eb       	ldi	r26, 0xB6	; 182
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3c       	cpi	r26, 0xCA	; 202
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  9e:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
}

int uart_transmit(char data, FILE *stream)
{
  while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
  UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
  return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:
    "1100",
};

void uart_init()
{
  UBRR0 = UBRR_VALUE;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UCSR0A = 0;
  d4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e4:	08 95       	ret

000000e6 <decode>:
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	7c 01       	movw	r14, r24
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	d1 e0       	ldi	r29, 0x01	; 1
  f8:	01 e6       	ldi	r16, 0x61	; 97
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	06 c0       	rjmp	.+12     	; 0x10a <decode+0x24>
  fe:	0f 5f       	subi	r16, 0xFF	; 255
 100:	1f 4f       	sbci	r17, 0xFF	; 255
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	c2 33       	cpi	r28, 0x32	; 50
 106:	d8 07       	cpc	r29, r24
 108:	81 f0       	breq	.+32     	; 0x12a <decode+0x44>
 10a:	69 91       	ld	r22, Y+
 10c:	79 91       	ld	r23, Y+
 10e:	c7 01       	movw	r24, r14
 110:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <strcmp>
 114:	89 2b       	or	r24, r25
 116:	99 f7       	brne	.-26     	; 0xfe <decode+0x18>
 118:	c8 01       	movw	r24, r16
 11a:	0e 94 75 01 	call	0x2ea	; 0x2ea <putchar>
 11e:	0f 5f       	subi	r16, 0xFF	; 255
 120:	1f 4f       	sbci	r17, 0xFF	; 255
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	c2 33       	cpi	r28, 0x32	; 50
 126:	d8 07       	cpc	r29, r24
 128:	81 f7       	brne	.-32     	; 0x10a <decode+0x24>
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	ff 90       	pop	r15
 134:	ef 90       	pop	r14
 136:	08 95       	ret

00000138 <main>:
FILE uart_file;

void decode(char x[]);

int main()
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <main+0x6>
 13e:	00 d0       	rcall	.+0      	; 0x140 <main+0x8>
 140:	1f 92       	push	r1
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
    "1100",
};

void uart_init()
{
  UBRR0 = UBRR_VALUE;
 146:	87 e6       	ldi	r24, 0x67	; 103
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 14e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UCSR0A = 0;
 152:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 156:	88 e1       	ldi	r24, 0x18	; 24
 158:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
void decode(char x[]);

int main()
{
  uart_init();
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 162:	86 eb       	ldi	r24, 0xB6	; 182
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	23 e5       	ldi	r18, 0x53	; 83
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	30 93 bf 01 	sts	0x01BF, r19	; 0x8001bf <__data_end+0x9>
 16e:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <__data_end+0x8>
 172:	2c e5       	ldi	r18, 0x5C	; 92
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	30 93 c1 01 	sts	0x01C1, r19	; 0x8001c1 <__data_end+0xb>
 17a:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <__data_end+0xa>
 17e:	23 e0       	ldi	r18, 0x03	; 3
 180:	20 93 b9 01 	sts	0x01B9, r18	; 0x8001b9 <__data_end+0x3>
 184:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <__data_end+0xd>
 188:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end+0xc>
  stdin = stdout = stderr = &uart_file;
 18c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <__iob+0x5>
 190:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__iob+0x4>
 194:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <__iob+0x3>
 198:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__iob+0x2>
 19c:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <__iob+0x1>
 1a0:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__iob>

  BTN_PORT |= _BV(BTN);
 1a4:	2c 9a       	sbi	0x05, 4	; 5
  LED_DDR |= _BV(LED1);
 1a6:	25 9a       	sbi	0x04, 5	; 4
  LED_DDR |= _BV(LED2);
 1a8:	23 9a       	sbi	0x04, 3	; 4
  LED_DDR |= _BV(LED3);
 1aa:	22 9a       	sbi	0x04, 2	; 4
  int counter = 0;
  int val = 0;
  int space = 0;
  int pos = 0;

  char x[] = "2222";
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	e4 e3       	ldi	r30, 0x34	; 52
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	de 01       	movw	r26, r28
 1b4:	11 96       	adiw	r26, 0x01	; 1
 1b6:	01 90       	ld	r0, Z+
 1b8:	0d 92       	st	X+, r0
 1ba:	8a 95       	dec	r24
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x7e>
  LED_DDR |= _BV(LED3);

  int counter = 0;
  int val = 0;
  int space = 0;
  int pos = 0;
 1be:	81 2c       	mov	r8, r1
 1c0:	91 2c       	mov	r9, r1
  LED_DDR |= _BV(LED2);
  LED_DDR |= _BV(LED3);

  int counter = 0;
  int val = 0;
  int space = 0;
 1c2:	a1 2c       	mov	r10, r1
 1c4:	b1 2c       	mov	r11, r1
  LED_DDR |= _BV(LED1);
  LED_DDR |= _BV(LED2);
  LED_DDR |= _BV(LED3);

  int counter = 0;
  int val = 0;
 1c6:	c1 2c       	mov	r12, r1
 1c8:	d1 2c       	mov	r13, r1
  BTN_PORT |= _BV(BTN);
  LED_DDR |= _BV(LED1);
  LED_DDR |= _BV(LED2);
  LED_DDR |= _BV(LED3);

  int counter = 0;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0

    if (val > 1){
      LED_PORT |= _BV(LED2);
      if (counter == 0)
      {
        x[pos] = '0';
 1ce:	20 e3       	ldi	r18, 0x30	; 48
 1d0:	72 2e       	mov	r7, r18
    _delay_ms(10);

    if(val > 15){
      LED_PORT |= _BV(LED1);
      if (counter == 0){
        x[pos] = '1';
 1d2:	31 e3       	ldi	r19, 0x31	; 49
 1d4:	63 2e       	mov	r6, r19
        if (pos <= 1)
          x[1] = '2';
        if (pos <= 2)
          x[2] = '2';
        if (pos <= 3)
          x[3] = '2';
 1d6:	42 e3       	ldi	r20, 0x32	; 50
 1d8:	54 2e       	mov	r5, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	ef e3       	ldi	r30, 0x3F	; 63
 1dc:	fc e9       	ldi	r31, 0x9C	; 156
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0xa6>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xac>
 1e4:	00 00       	nop
  char x[] = "2222";

  while(1) {
    _delay_ms(10);

    if(val > 15){
 1e6:	f0 e1       	ldi	r31, 0x10	; 16
 1e8:	cf 16       	cp	r12, r31
 1ea:	d1 04       	cpc	r13, r1
 1ec:	f4 f0       	brlt	.+60     	; 0x22a <main+0xf2>
      LED_PORT |= _BV(LED1);
 1ee:	2d 9a       	sbi	0x05, 5	; 5
      if (counter == 0){
 1f0:	00 97       	sbiw	r24, 0x00	; 0
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <main+0xbe>
 1f4:	3f c0       	rjmp	.+126    	; 0x274 <main+0x13c>
        x[pos] = '1';
 1f6:	e1 e0       	ldi	r30, 0x01	; 1
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ec 0f       	add	r30, r28
 1fc:	fd 1f       	adc	r31, r29
 1fe:	e8 0d       	add	r30, r8
 200:	f9 1d       	adc	r31, r9
 202:	60 82       	st	Z, r6
        val = 0;
        pos++;
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	82 1a       	sub	r8, r18
 208:	92 0a       	sbc	r9, r18

    if(val > 15){
      LED_PORT |= _BV(LED1);
      if (counter == 0){
        x[pos] = '1';
        val = 0;
 20a:	c1 2c       	mov	r12, r1
 20c:	d1 2c       	mov	r13, r1
        val = 0;
        pos++;
      }
    }

    if (BTN_PIN & _BV(BTN)){
 20e:	1c 9b       	sbis	0x03, 4	; 3
 210:	21 c0       	rjmp	.+66     	; 0x254 <main+0x11c>
      space++;
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	a2 1a       	sub	r10, r18
 216:	b2 0a       	sbc	r11, r18
      if (space == 30)
 218:	8e e1       	ldi	r24, 0x1E	; 30
 21a:	a8 16       	cp	r10, r24
 21c:	b1 04       	cpc	r11, r1
 21e:	79 f1       	breq	.+94     	; 0x27e <main+0x146>
          x[3] = '2';
        decode(x);

      }
      counter = 0;
      LED_PORT &= ~_BV(LED1);
 220:	2d 98       	cbi	0x05, 5	; 5
      LED_PORT &= ~_BV(LED2);
 222:	2b 98       	cbi	0x05, 3	; 5
        if (pos <= 3)
          x[3] = '2';
        decode(x);

      }
      counter = 0;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	d8 cf       	rjmp	.-80     	; 0x1da <main+0xa2>
        val = 0;
        pos++;
      }
    }

    if (val > 1){
 22a:	e2 e0       	ldi	r30, 0x02	; 2
 22c:	ce 16       	cp	r12, r30
 22e:	d1 04       	cpc	r13, r1
 230:	74 f3       	brlt	.-36     	; 0x20e <main+0xd6>
      LED_PORT |= _BV(LED2);
 232:	2b 9a       	sbi	0x05, 3	; 5
      if (counter == 0)
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	59 f7       	brne	.-42     	; 0x20e <main+0xd6>
      {
        x[pos] = '0';
 238:	e1 e0       	ldi	r30, 0x01	; 1
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	ec 0f       	add	r30, r28
 23e:	fd 1f       	adc	r31, r29
 240:	e8 0d       	add	r30, r8
 242:	f9 1d       	adc	r31, r9
 244:	70 82       	st	Z, r7
        val = 0;
        pos++;
 246:	ff ef       	ldi	r31, 0xFF	; 255
 248:	8f 1a       	sub	r8, r31
 24a:	9f 0a       	sbc	r9, r31
    if (val > 1){
      LED_PORT |= _BV(LED2);
      if (counter == 0)
      {
        x[pos] = '0';
        val = 0;
 24c:	c1 2c       	mov	r12, r1
 24e:	d1 2c       	mov	r13, r1
        pos++;
      }
    }

    if (BTN_PIN & _BV(BTN)){
 250:	1c 99       	sbic	0x03, 4	; 3
 252:	df cf       	rjmp	.-66     	; 0x212 <main+0xda>
      counter = 0;
      LED_PORT &= ~_BV(LED1);
      LED_PORT &= ~_BV(LED2);
    }
    else{
      if(space > 30){
 254:	ef e1       	ldi	r30, 0x1F	; 31
 256:	ae 16       	cp	r10, r30
 258:	b1 04       	cpc	r11, r1
 25a:	14 f0       	brlt	.+4      	; 0x260 <main+0x128>
        pos = 0;
 25c:	81 2c       	mov	r8, r1
 25e:	91 2c       	mov	r9, r1
      }
      LED_PORT &= ~_BV(LED3);
 260:	2a 98       	cbi	0x05, 2	; 5
      space = 0;
      counter++;
 262:	01 96       	adiw	r24, 0x01	; 1
    if (counter % 2 == 0)
 264:	80 fd       	sbrc	r24, 0
 266:	08 c0       	rjmp	.+16     	; 0x278 <main+0x140>
      val++;
 268:	ff ef       	ldi	r31, 0xFF	; 255
 26a:	cf 1a       	sub	r12, r31
 26c:	df 0a       	sbc	r13, r31
    else{
      if(space > 30){
        pos = 0;
      }
      LED_PORT &= ~_BV(LED3);
      space = 0;
 26e:	a1 2c       	mov	r10, r1
 270:	b1 2c       	mov	r11, r1
 272:	b3 cf       	rjmp	.-154    	; 0x1da <main+0xa2>
        pos++;
      }
    }

    if (val > 1){
      LED_PORT |= _BV(LED2);
 274:	2b 9a       	sbi	0x05, 3	; 5
 276:	cb cf       	rjmp	.-106    	; 0x20e <main+0xd6>
    else{
      if(space > 30){
        pos = 0;
      }
      LED_PORT &= ~_BV(LED3);
      space = 0;
 278:	a1 2c       	mov	r10, r1
 27a:	b1 2c       	mov	r11, r1
 27c:	ae cf       	rjmp	.-164    	; 0x1da <main+0xa2>

    if (BTN_PIN & _BV(BTN)){
      space++;
      if (space == 30)
      {      
        LED_PORT |= _BV(LED3);
 27e:	2a 9a       	sbi	0x05, 2	; 5
        if (pos <= 1)
 280:	e2 e0       	ldi	r30, 0x02	; 2
 282:	8e 16       	cp	r8, r30
 284:	91 04       	cpc	r9, r1
 286:	24 f1       	brlt	.+72     	; 0x2d0 <main+0x198>
          x[1] = '2';
        if (pos <= 2)
 288:	f2 e0       	ldi	r31, 0x02	; 2
 28a:	8f 16       	cp	r8, r31
 28c:	91 04       	cpc	r9, r1
 28e:	09 f1       	breq	.+66     	; 0x2d2 <main+0x19a>
          x[2] = '2';
        if (pos <= 3)
 290:	23 e0       	ldi	r18, 0x03	; 3
 292:	82 16       	cp	r8, r18
 294:	91 04       	cpc	r9, r1
 296:	f1 f0       	breq	.+60     	; 0x2d4 <main+0x19c>
 298:	00 e0       	ldi	r16, 0x00	; 0
 29a:	11 e0       	ldi	r17, 0x01	; 1
    if (val > 1){
      LED_PORT |= _BV(LED2);
      if (counter == 0)
      {
        x[pos] = '0';
        val = 0;
 29c:	81 e6       	ldi	r24, 0x61	; 97
 29e:	e8 2e       	mov	r14, r24
 2a0:	f1 2c       	mov	r15, r1
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <main+0x17c>
 2a4:	ff ef       	ldi	r31, 0xFF	; 255
 2a6:	ef 1a       	sub	r14, r31
 2a8:	ff 0a       	sbc	r15, r31
}

void decode(char l[]){

  //printf("%s\n", l);
  for (int i = 0; i < 25; ++i)
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	02 33       	cpi	r16, 0x32	; 50
 2ae:	12 07       	cpc	r17, r18
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <main+0x17c>
 2b2:	b6 cf       	rjmp	.-148    	; 0x220 <main+0xe8>
  {
    if (strcmp(l, mors[i]) == 0)
 2b4:	f8 01       	movw	r30, r16
 2b6:	61 91       	ld	r22, Z+
 2b8:	71 91       	ld	r23, Z+
 2ba:	8f 01       	movw	r16, r30
 2bc:	ce 01       	movw	r24, r28
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <strcmp>
 2c4:	89 2b       	or	r24, r25
 2c6:	71 f7       	brne	.-36     	; 0x2a4 <main+0x16c>
    {
      //printf("%s\n", mors[i]);
      printf("%c", i+97);
 2c8:	c7 01       	movw	r24, r14
 2ca:	0e 94 75 01 	call	0x2ea	; 0x2ea <putchar>
 2ce:	ea cf       	rjmp	.-44     	; 0x2a4 <main+0x16c>
      space++;
      if (space == 30)
      {      
        LED_PORT |= _BV(LED3);
        if (pos <= 1)
          x[1] = '2';
 2d0:	5a 82       	std	Y+2, r5	; 0x02
        if (pos <= 2)
          x[2] = '2';
 2d2:	5b 82       	std	Y+3, r5	; 0x03
        if (pos <= 3)
          x[3] = '2';
 2d4:	5c 82       	std	Y+4, r5	; 0x04
 2d6:	e0 cf       	rjmp	.-64     	; 0x298 <main+0x160>

000002d8 <strcmp>:
 2d8:	fb 01       	movw	r30, r22
 2da:	dc 01       	movw	r26, r24
 2dc:	8d 91       	ld	r24, X+
 2de:	01 90       	ld	r0, Z+
 2e0:	80 19       	sub	r24, r0
 2e2:	01 10       	cpse	r0, r1
 2e4:	d9 f3       	breq	.-10     	; 0x2dc <strcmp+0x4>
 2e6:	99 0b       	sbc	r25, r25
 2e8:	08 95       	ret

000002ea <putchar>:
 2ea:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <__iob+0x2>
 2ee:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <__iob+0x3>
 2f2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <fputc>
 2f6:	08 95       	ret

000002f8 <fputc>:
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	fb 01       	movw	r30, r22
 302:	23 81       	ldd	r18, Z+3	; 0x03
 304:	21 fd       	sbrc	r18, 1
 306:	03 c0       	rjmp	.+6      	; 0x30e <fputc+0x16>
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	9f ef       	ldi	r25, 0xFF	; 255
 30c:	2c c0       	rjmp	.+88     	; 0x366 <fputc+0x6e>
 30e:	22 ff       	sbrs	r18, 2
 310:	16 c0       	rjmp	.+44     	; 0x33e <fputc+0x46>
 312:	46 81       	ldd	r20, Z+6	; 0x06
 314:	57 81       	ldd	r21, Z+7	; 0x07
 316:	24 81       	ldd	r18, Z+4	; 0x04
 318:	35 81       	ldd	r19, Z+5	; 0x05
 31a:	42 17       	cp	r20, r18
 31c:	53 07       	cpc	r21, r19
 31e:	44 f4       	brge	.+16     	; 0x330 <fputc+0x38>
 320:	a0 81       	ld	r26, Z
 322:	b1 81       	ldd	r27, Z+1	; 0x01
 324:	9d 01       	movw	r18, r26
 326:	2f 5f       	subi	r18, 0xFF	; 255
 328:	3f 4f       	sbci	r19, 0xFF	; 255
 32a:	31 83       	std	Z+1, r19	; 0x01
 32c:	20 83       	st	Z, r18
 32e:	8c 93       	st	X, r24
 330:	26 81       	ldd	r18, Z+6	; 0x06
 332:	37 81       	ldd	r19, Z+7	; 0x07
 334:	2f 5f       	subi	r18, 0xFF	; 255
 336:	3f 4f       	sbci	r19, 0xFF	; 255
 338:	37 83       	std	Z+7, r19	; 0x07
 33a:	26 83       	std	Z+6, r18	; 0x06
 33c:	14 c0       	rjmp	.+40     	; 0x366 <fputc+0x6e>
 33e:	8b 01       	movw	r16, r22
 340:	ec 01       	movw	r28, r24
 342:	fb 01       	movw	r30, r22
 344:	00 84       	ldd	r0, Z+8	; 0x08
 346:	f1 85       	ldd	r31, Z+9	; 0x09
 348:	e0 2d       	mov	r30, r0
 34a:	09 95       	icall
 34c:	89 2b       	or	r24, r25
 34e:	e1 f6       	brne	.-72     	; 0x308 <fputc+0x10>
 350:	d8 01       	movw	r26, r16
 352:	16 96       	adiw	r26, 0x06	; 6
 354:	8d 91       	ld	r24, X+
 356:	9c 91       	ld	r25, X
 358:	17 97       	sbiw	r26, 0x07	; 7
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	17 96       	adiw	r26, 0x07	; 7
 35e:	9c 93       	st	X, r25
 360:	8e 93       	st	-X, r24
 362:	16 97       	sbiw	r26, 0x06	; 6
 364:	ce 01       	movw	r24, r28
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
