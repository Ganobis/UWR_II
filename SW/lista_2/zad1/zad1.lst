
zad1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000158  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005b8  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ccd  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#define BTN PB4
#define BTN_PIN PINB
#define BTN_PORT PORTB

int main() {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	c5 56       	subi	r28, 0x65	; 101
  8a:	d1 09       	sbc	r29, r1
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  BTN_PORT |= _BV(BTN);
  96:	2c 9a       	sbi	0x05, 4	; 5
  LED_DDR |= _BV(LED);
  98:	25 9a       	sbi	0x04, 5	; 4
  9a:	8e 01       	movw	r16, r28
  9c:	0f 5f       	subi	r16, 0xFF	; 255
  9e:	1f 4f       	sbci	r17, 0xFF	; 255
  a0:	85 e6       	ldi	r24, 0x65	; 101
  a2:	f8 01       	movw	r30, r16
  a4:	11 92       	st	Z+, r1
  a6:	8a 95       	dec	r24
  a8:	e9 f7       	brne	.-6      	; 0xa4 <main+0x24>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  	press_memory[i] = false;
  }

  while (1) {
    if (BTN_PIN & _BV(BTN))
    	press_memory[counter] = true;
  ae:	41 e0       	ldi	r20, 0x01	; 1
    else
    	press_memory[counter] = false;
    if (press_memory[(counter + 1) % 101])
  b0:	85 e6       	ldi	r24, 0x65	; 101
  b2:	e8 2e       	mov	r14, r24
  b4:	f1 2c       	mov	r15, r1
  	press_memory[i] = false;
  }

  while (1) {
    if (BTN_PIN & _BV(BTN))
    	press_memory[counter] = true;
  b6:	f8 01       	movw	r30, r16
  b8:	e2 0f       	add	r30, r18
  ba:	f3 1f       	adc	r31, r19
  {
  	press_memory[i] = false;
  }

  while (1) {
    if (BTN_PIN & _BV(BTN))
  bc:	1c 9b       	sbis	0x03, 4	; 3
  be:	1e c0       	rjmp	.+60     	; 0xfc <main+0x7c>
    	press_memory[counter] = true;
  c0:	40 83       	st	Z, r20
    else
    	press_memory[counter] = false;
    if (press_memory[(counter + 1) % 101])
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	c9 01       	movw	r24, r18
  c8:	b7 01       	movw	r22, r14
  ca:	0e 94 82 00 	call	0x104	; 0x104 <__divmodhi4>
  ce:	f8 01       	movw	r30, r16
  d0:	e8 0f       	add	r30, r24
  d2:	f9 1f       	adc	r31, r25
  d4:	80 81       	ld	r24, Z
  d6:	88 23       	and	r24, r24
  d8:	99 f0       	breq	.+38     	; 0x100 <main+0x80>
      LED_PORT &= ~_BV(LED);
  da:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	9c e9       	ldi	r25, 0x9C	; 156
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x60>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x66>
  e6:	00 00       	nop
    else
      LED_PORT |= _BV(LED);
    _delay_ms(10);
  	counter++;
    if (counter >= 101)
  e8:	25 36       	cpi	r18, 0x65	; 101
  ea:	31 05       	cpc	r19, r1
  ec:	24 f3       	brlt	.-56     	; 0xb6 <main+0x36>
	   counter = 0;
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  	press_memory[i] = false;
  }

  while (1) {
    if (BTN_PIN & _BV(BTN))
    	press_memory[counter] = true;
  f2:	f8 01       	movw	r30, r16
  f4:	e2 0f       	add	r30, r18
  f6:	f3 1f       	adc	r31, r19
  {
  	press_memory[i] = false;
  }

  while (1) {
    if (BTN_PIN & _BV(BTN))
  f8:	1c 99       	sbic	0x03, 4	; 3
  fa:	e2 cf       	rjmp	.-60     	; 0xc0 <main+0x40>
    	press_memory[counter] = true;
    else
    	press_memory[counter] = false;
  fc:	10 82       	st	Z, r1
  fe:	e1 cf       	rjmp	.-62     	; 0xc2 <main+0x42>
    if (press_memory[(counter + 1) % 101])
      LED_PORT &= ~_BV(LED);
    else
      LED_PORT |= _BV(LED);
 100:	2d 9a       	sbi	0x05, 5	; 5
 102:	ec cf       	rjmp	.-40     	; 0xdc <main+0x5c>

00000104 <__divmodhi4>:
 104:	97 fb       	bst	r25, 7
 106:	07 2e       	mov	r0, r23
 108:	16 f4       	brtc	.+4      	; 0x10e <__divmodhi4+0xa>
 10a:	00 94       	com	r0
 10c:	07 d0       	rcall	.+14     	; 0x11c <__divmodhi4_neg1>
 10e:	77 fd       	sbrc	r23, 7
 110:	09 d0       	rcall	.+18     	; 0x124 <__divmodhi4_neg2>
 112:	0e 94 96 00 	call	0x12c	; 0x12c <__udivmodhi4>
 116:	07 fc       	sbrc	r0, 7
 118:	05 d0       	rcall	.+10     	; 0x124 <__divmodhi4_neg2>
 11a:	3e f4       	brtc	.+14     	; 0x12a <__divmodhi4_exit>

0000011c <__divmodhi4_neg1>:
 11c:	90 95       	com	r25
 11e:	81 95       	neg	r24
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	08 95       	ret

00000124 <__divmodhi4_neg2>:
 124:	70 95       	com	r23
 126:	61 95       	neg	r22
 128:	7f 4f       	sbci	r23, 0xFF	; 255

0000012a <__divmodhi4_exit>:
 12a:	08 95       	ret

0000012c <__udivmodhi4>:
 12c:	aa 1b       	sub	r26, r26
 12e:	bb 1b       	sub	r27, r27
 130:	51 e1       	ldi	r21, 0x11	; 17
 132:	07 c0       	rjmp	.+14     	; 0x142 <__udivmodhi4_ep>

00000134 <__udivmodhi4_loop>:
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	a6 17       	cp	r26, r22
 13a:	b7 07       	cpc	r27, r23
 13c:	10 f0       	brcs	.+4      	; 0x142 <__udivmodhi4_ep>
 13e:	a6 1b       	sub	r26, r22
 140:	b7 0b       	sbc	r27, r23

00000142 <__udivmodhi4_ep>:
 142:	88 1f       	adc	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	5a 95       	dec	r21
 148:	a9 f7       	brne	.-22     	; 0x134 <__udivmodhi4_loop>
 14a:	80 95       	com	r24
 14c:	90 95       	com	r25
 14e:	bc 01       	movw	r22, r24
 150:	cd 01       	movw	r24, r26
 152:	08 95       	ret

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
