
zad4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000010c  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005e8  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cb5  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001429  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:


//uint8_t show_number(uint8_t x);

int main() {
  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  96:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  9a:	87 7e       	andi	r24, 0xE7	; 231
  9c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  LED_DDR |= 0b11111111;
  a0:	8a b1       	in	r24, 0x0a	; 10
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a b9       	out	0x0a, r24	; 10
  //TRN_DDR = _BV(TRN1);
  //TRN_DDR = _BV(TRN2);
  TRN_DDR = 0b11111111;
  a6:	87 b9       	out	0x07, r24	; 7
  a8:	5d ec       	ldi	r21, 0xCD	; 205
  while(1){
  	for (uint8_t i = 0; i < 60; i++)
  	{
  		for (uint8_t j = 0; j <= 250; ++j)
  		{
  			TRN_PORT = _BV(TRN1);
  aa:	31 e0       	ldi	r19, 0x01	; 1
  			LED_PORT = ~(numb[i%10]);

  			_delay_ms(2);

  			TRN_PORT = _BV(TRN2);
  ac:	22 e0       	ldi	r18, 0x02	; 2
  //TRN_DDR = _BV(TRN1);
  //TRN_DDR = _BV(TRN2);
  TRN_DDR = 0b11111111;

  while(1){
  	for (uint8_t i = 0; i < 60; i++)
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	45 9f       	mul	r20, r21
  b2:	e1 2d       	mov	r30, r1
  b4:	11 24       	eor	r1, r1
  b6:	e6 95       	lsr	r30
  b8:	e6 95       	lsr	r30
  ba:	e6 95       	lsr	r30
  bc:	a4 2f       	mov	r26, r20
  be:	da e0       	ldi	r29, 0x0A	; 10
  c0:	ed 9f       	mul	r30, r29
  c2:	a0 19       	sub	r26, r0
  c4:	11 24       	eor	r1, r1
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	f0 e0       	ldi	r31, 0x00	; 0
};


//uint8_t show_number(uint8_t x);

int main() {
  ca:	9b ef       	ldi	r25, 0xFB	; 251
  cc:	a0 50       	subi	r26, 0x00	; 0
  ce:	bf 4f       	sbci	r27, 0xFF	; 255
  d0:	e0 50       	subi	r30, 0x00	; 0
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  while(1){
  	for (uint8_t i = 0; i < 60; i++)
  	{
  		for (uint8_t j = 0; j <= 250; ++j)
  		{
  			TRN_PORT = _BV(TRN1);
  d4:	38 b9       	out	0x08, r19	; 8
  			LED_PORT = ~(numb[i%10]);
  d6:	8c 91       	ld	r24, X
  d8:	80 95       	com	r24
  da:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	cf e3       	ldi	r28, 0x3F	; 63
  de:	df e1       	ldi	r29, 0x1F	; 31
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x4a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x50>
  e6:	00 00       	nop

  			_delay_ms(2);

  			TRN_PORT = _BV(TRN2);
  e8:	28 b9       	out	0x08, r18	; 8
  			LED_PORT = ~(numb[i/10]);
  ea:	80 81       	ld	r24, Z
  ec:	80 95       	com	r24
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	cf e3       	ldi	r28, 0x3F	; 63
  f2:	df e1       	ldi	r29, 0x1F	; 31
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x5e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x64>
  fa:	00 00       	nop
  fc:	91 50       	subi	r25, 0x01	; 1
  TRN_DDR = 0b11111111;

  while(1){
  	for (uint8_t i = 0; i < 60; i++)
  	{
  		for (uint8_t j = 0; j <= 250; ++j)
  fe:	51 f7       	brne	.-44     	; 0xd4 <main+0x3e>
  //TRN_DDR = _BV(TRN1);
  //TRN_DDR = _BV(TRN2);
  TRN_DDR = 0b11111111;

  while(1){
  	for (uint8_t i = 0; i < 60; i++)
 100:	4f 5f       	subi	r20, 0xFF	; 255
 102:	4c 33       	cpi	r20, 0x3C	; 60
 104:	a9 f6       	brne	.-86     	; 0xb0 <main+0x1a>
 106:	d3 cf       	rjmp	.-90     	; 0xae <main+0x18>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
