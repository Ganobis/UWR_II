
zad3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000de  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000054c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c78  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define LED_DDR DDRD
#define LED_PORT PORTD

int main()
{
	UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  80:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  84:	87 7e       	andi	r24, 0xE7	; 231
  86:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	LED_DDR |= 0b11111111;
  8a:	8a b1       	in	r24, 0x0a	; 10
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	8a b9       	out	0x0a, r24	; 10
	while(1){
		LED_PORT = 0b00000001;
  90:	91 e0       	ldi	r25, 0x01	; 1
  92:	9b b9       	out	0x0b, r25	; 11
  94:	27 e0       	ldi	r18, 0x07	; 7
  96:	30 e0       	ldi	r19, 0x00	; 0
		for (int i = 0; i < 7; ++i)
		{
			LED_PORT = (LED_PORT << 1);
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	88 0f       	add	r24, r24
  9c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	4f ef       	ldi	r20, 0xFF	; 255
  a0:	50 e7       	ldi	r21, 0x70	; 112
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	41 50       	subi	r20, 0x01	; 1
  a6:	50 40       	sbci	r21, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	31 09       	sbc	r19, r1
{
	UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
	LED_DDR |= 0b11111111;
	while(1){
		LED_PORT = 0b00000001;
		for (int i = 0; i < 7; ++i)
  b4:	89 f7       	brne	.-30     	; 0x98 <main+0x18>
  b6:	27 e0       	ldi	r18, 0x07	; 7
  b8:	30 e0       	ldi	r19, 0x00	; 0
			LED_PORT = (LED_PORT << 1);
			_delay_ms(50);
		}
		for (int i = 0; i < 7; ++i)
		{
			LED_PORT = (LED_PORT >> 1);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	86 95       	lsr	r24
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	4f ef       	ldi	r20, 0xFF	; 255
  c2:	50 e7       	ldi	r21, 0x70	; 112
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	41 50       	subi	r20, 0x01	; 1
  c8:	50 40       	sbci	r21, 0x00	; 0
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x46>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x50>
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
		for (int i = 0; i < 7; ++i)
		{
			LED_PORT = (LED_PORT << 1);
			_delay_ms(50);
		}
		for (int i = 0; i < 7; ++i)
  d6:	89 f7       	brne	.-30     	; 0xba <main+0x3a>
  d8:	dc cf       	rjmp	.-72     	; 0x92 <main+0x12>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
