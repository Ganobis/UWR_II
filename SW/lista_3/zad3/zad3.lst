
zad3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000152  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  000001e6  2**0
                  ALLOC
  3 .stab         00000798  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e72  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000017f2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000023da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
#define LED_PORT PORTD

//inicjalizacja ADC
void adc_init()
{
	ADMUX = _BV(REFS0); //referencja AVcc, wejście ADC0
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	DIDR0 = _BV(ADC0D); //wyłącz wejście cyfrowe na ADC0
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	//częstotliwość zegara ADC 125kHz (16MHz / 128)
	ADCSRA = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2); //presklaer 128
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	87 e0       	ldi	r24, 0x07	; 7
  a2:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN); //wyłącz ADC
  a4:	80 81       	ld	r24, Z
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <my_delay_us>:

FILE uart_file;

void my_delay_us(int us)
{
  while (0 < us)
  ac:	18 16       	cp	r1, r24
  ae:	19 06       	cpc	r1, r25
  b0:	34 f4       	brge	.+12     	; 0xbe <my_delay_us+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	25 e0       	ldi	r18, 0x05	; 5
  b4:	2a 95       	dec	r18
  b6:	f1 f7       	brne	.-4      	; 0xb4 <my_delay_us+0x8>
  b8:	00 00       	nop
  {  
    _delay_us(1);
    --us;
  ba:	01 97       	sbiw	r24, 0x01	; 1

FILE uart_file;

void my_delay_us(int us)
{
  while (0 < us)
  bc:	d1 f7       	brne	.-12     	; 0xb2 <my_delay_us+0x6>
  be:	08 95       	ret

000000c0 <main>:
  }
}

int main()
{
	DDRD |= _BV(LED);
  c0:	53 9a       	sbi	0x0a, 3	; 10
#define LED_PORT PORTD

//inicjalizacja ADC
void adc_init()
{
	ADMUX = _BV(REFS0); //referencja AVcc, wejście ADC0
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	DIDR0 = _BV(ADC0D); //wyłącz wejście cyfrowe na ADC0
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	//częstotliwość zegara ADC 125kHz (16MHz / 128)
	ADCSRA = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2); //presklaer 128
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRA |= _BV(ADEN); //wyłącz ADC
  d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		while(ADCSRA & _BV(ADSC));
		wynik = ADC; //weź zmierzoną wartość (0..1023)
		mniejsze_bity = wynik >> 2;
		mniejsze_bity &= 0b1111;
		znaczace_bity = wynik >> 6; 
		czas = 0b1 << znaczace_bity;
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t znaczace_bity;
	uint16_t mniejsze_bity;
	uint16_t wynik;
	uint16_t czas;
	while(1){
		LED_PORT &= ~_BV(LED);
  e2:	5b 98       	cbi	0x0b, 3	; 11
  e4:	8c e2       	ldi	r24, 0x2C	; 44
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	45 e0       	ldi	r20, 0x05	; 5
  ea:	4a 95       	dec	r20
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x2a>
  ee:	00 00       	nop
  f0:	01 97       	sbiw	r24, 0x01	; 1

FILE uart_file;

void my_delay_us(int us)
{
  while (0 < us)
  f2:	d1 f7       	brne	.-12     	; 0xe8 <main+0x28>
	uint16_t wynik;
	uint16_t czas;
	while(1){
		LED_PORT &= ~_BV(LED);
		my_delay_us(300);
		ADCSRA |= _BV(ADSC); //wykonaj konwersję
  f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		while(ADCSRA & _BV(ADSC));
  fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 102:	86 fd       	sbrc	r24, 6
 104:	fc cf       	rjmp	.-8      	; 0xfe <main+0x3e>
		wynik = ADC; //weź zmierzoną wartość (0..1023)
 106:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 10a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		mniejsze_bity = wynik >> 2;
		mniejsze_bity &= 0b1111;
		znaczace_bity = wynik >> 6; 
		czas = 0b1 << znaczace_bity;
 10e:	00 24       	eor	r0, r0
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	00 1c       	adc	r0, r0
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	00 1c       	adc	r0, r0
 11c:	89 2f       	mov	r24, r25
 11e:	90 2d       	mov	r25, r0
 120:	a9 01       	movw	r20, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0x68>
 124:	44 0f       	add	r20, r20
 126:	55 1f       	adc	r21, r21
 128:	8a 95       	dec	r24
 12a:	e2 f7       	brpl	.-8      	; 0x124 <main+0x64>
 12c:	ca 01       	movw	r24, r20
 12e:	81 33       	cpi	r24, 0x31	; 49
 130:	55 e7       	ldi	r21, 0x75	; 117
 132:	95 07       	cpc	r25, r21
 134:	10 f0       	brcs	.+4      	; 0x13a <main+0x7a>
 136:	80 e3       	ldi	r24, 0x30	; 48
 138:	95 e7       	ldi	r25, 0x75	; 117
		czas += mniejsze_bity/16;
		if (czas > 30000)
			czas = 30000;
		LED_PORT |= _BV(LED);
 13a:	5b 9a       	sbi	0x0b, 3	; 11

FILE uart_file;

void my_delay_us(int us)
{
  while (0 < us)
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	89 f2       	breq	.-94     	; 0xe2 <main+0x22>
 140:	45 e0       	ldi	r20, 0x05	; 5
 142:	4a 95       	dec	r20
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x82>
 146:	00 00       	nop
  {  
    _delay_us(1);
    --us;
 148:	01 97       	sbiw	r24, 0x01	; 1

FILE uart_file;

void my_delay_us(int us)
{
  while (0 < us)
 14a:	d1 f7       	brne	.-12     	; 0x140 <main+0x80>
 14c:	ca cf       	rjmp	.-108    	; 0xe2 <main+0x22>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
